import sysimport argparseimport osimport zipfileimport platformreload(sys)sys.setdefaultencoding('gbk')format = ['rar', 'zip', '7z', 'ace', 'arj', 'bz2', 'cab', 'gz', 'iso', 'jar', 'lzh', 'tar', 'uue', 'z']def RunMsi(path):    print("Installing from MSI.")    os.system('msiexec /i "' + path + '" /qr')  # change to 'qn' if own admin priority.    print("Done")def RunWithCommand(path, command):    print("Installing with command.")    os.system('"' + path + '" '+command)    print("Done")def RunUnZip(path):    print("Extracting from zip.")    f = zipfile.ZipFile(path, 'r')    if not os.path.isdir(path + "_file"):        os.mkdir(path + "_file")    for file in f.namelist():        f.extract(file, path + "_file")    f.close()    print('Extract finish.')def RunUnRar(path):    pf = platform.platform()    print("Extracting...")    expath = path + "_file"    if not os.path.isdir(expath):        os.mkdir(expath)    if pf[0:7].lower()=="windows":        command = 'winrar x -ibck "' + path + '" "' + expath + '"'        os.system(command)        print('Extract finish.')    elif os.path.splitext(path)[1][1:].lower()=='tar':        command = 'tar xvf "'+path+'" -C "'+expath+'"'        os.system(command)        print('Extract finish.')    elif os.path.splitext(path)[1][1:].lower()=='gz':        command = 'tar zxvf "'+path+'" -C "'+expath+'"'        os.system(command)        print('Extract finish.')    elif os.path.splitext(path)[1][1:].lower() in ['bz','bz2']:        command = 'tar -jxvf "'+path+'" -C "'+expath+'"'        os.system(command)        print('Extract finish.')    elif os.path.splitext(path)[1][1:].lower()=='Z':        command = 'tar -Zxvf "'+path+'" -C "'+expath+'"'        os.system(command)        print('Extract finish.')    else:        print('Unknow Format!')def RunExe(path):    print("Installing from Exe.")    os.system('"' + path + '" /S')    print("Done")def RunDeb(path):    print("Installing from Deb.")    os.system('dpkg -i "' + path + '"')    print("Done")def Run(path, command=None, pathinfile=None):    if not os.path.isfile(path):        print("ERROR: File doesn't exist")        return    if os.path.splitext(path)[1][1:].lower() in format and pathinfile is None:        print("ERROR: pathinfile isn't provided")        return    if os.path.splitext(path)[1][1:].lower() == "zip":  # unzip        RunUnZip(path)        path = path + "_file/" + pathinfile        print("New Path => " + path)    elif os.path.splitext(path)[1][1:].lower() in format:  # unrar        RunUnRar(path)        path = path + "_file/" + pathinfile        print("New Path => " + path)    if not command is None:  # if command provided, run with command        RunWithCommand(path, command)    elif os.path.splitext(path)[1][1:].lower() == "msi":        RunMsi(path)    elif os.path.splitext(path)[1][1:].lower() == "exe":        RunExe(path)    elif os.path.splitext(path)[1][1:].lower() == "deb":        RunDeb(path)    else:        os.system(path)if __name__ == '__main__':    parser = argparse.ArgumentParser()    parser.add_argument('path', help="Path for installor")    parser.add_argument('--command', help='Commond to self-install')    parser.add_argument('--pathinfile', help='Commond to self-install')    args = parser.parse_args()    Run(args.path, args.command, args.pathinfile)